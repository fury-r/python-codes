def isBalanced(s):
    stack=[]
    pair={
        '(':')','[':']','{':'}'
    }
    for i in s:
        if i in '({[':
            stack.append(i)
        elif i in ')}]' :

            if( len(stack)==0 or pair[stack[-1]]!=i ):
                return 'NO',s
            stack.pop(-1)
    return 'YES',s

x='''[()][{}()][](){}([{}(())([[{}]])][])[]([][])(){}{{}{[](){}}}()[]({})[{}{{}([{}][])}]
[()][{}[{}[{}]]][]{}[]{}[]{{}({}(){({{}{}[([[]][[]])()]})({}{{}})})}
(])[{{{][)[)])(]){(}))[{(})][[{)(}){[(]})[[{}(])}({)(}[[()}{}}]{}{}}()}{({}](]{{[}}(([{]
){[]()})}}]{}[}}})}{]{](]](()][{))])(}]}))(}[}{{)}{[[}[]
}(]}){
((]()(]([({]}({[)){}}[}({[{])(]{()[]}}{)}}]]{({)[}{(
{}{({{}})}[][{{}}]{}{}(){{}[]}{}([[][{}]]())
(){}[()[][]]{}(())()[[([])][()]{}{}(({}[]()))()[()[{()}]][]]
()([]({}[]){}){}{()}[]{}[]()(()([[]]()))()()()[]()(){{}}()({[{}][]}[[{{}({({({})})})}]])
[]([{][][)(])}()([}[}(})}])}))]](}{}})[]({{}}))[])(}}[[{]{}]()[(][])}({]{}[[))[[}[}{(]})()){{(]]){][
{()({}[[{}]]()(){[{{}{[[{}]{}((({[]}{}()[])))]((()()))}(()[[[]]])((()[[](({([])()}))[]]))}]})}
()(){{}}[()()]{}{}
{}()([[]])({}){({[][[][[()]]{{}[[]()]}]})}[](())((())[{{}}])
{}(((){}){[]{{()()}}()})[]{{()}{(){()(){}}}}{()}({()(()({}{}()((()((([])){[][{()}{}]})))))})
][[{)())))}[)}}}}[{){}()]([][]){{{{{[)}]]{([{)()][({}[){]({{
{{}(
{[{((({}{({({()})()})[]({()[[][][]]}){}}))){}}]}{}{({((){{}[][]{}[][]{}}[{}])(())}[][])}
()[[][()[]][]()](([[[(){()[[]](([]))}]]]))
()[]({}{})(()){{{}}()()}({[]()}())[](){}(({()}[{}[{({{}}){({}){({})((({()})))}}}]]))
}[{){({}({)})]([}{[}}{[(([])[(}){[]])([]]}(]]]]{][
[{]{[{(){[}{}(([(]}])(){[[}(]){(})))}}{{)}}{}][({(}))]}({)
)})[(]{][[())]{[]{{}}[)[)}[]){}](}({](}}}[}{({()]]
[[[({[]}({[][[[[][[{(()[][])}()[][]][]{}]]]]}))][(()){}]]]()[{}([]{}){}{{}}]
({[]({[]})}())[][{}[{{(({{{([{}])}}}))}}]]
([((()))()])[][][]{}()(([]))[]()[]((){}[]){}(){{}[]}[[{[]}]]
[[(((({}{[]{}()}){}{{}}){({[]{[{}]{(){}(((){()}))}()}}[[]]()()[()])[[{}{}]()]}))]]{}[]{}({({{}})})
(]{()}((
[][(())[({{{()[]}}{[[][[][[[]{{{[()]{{{{}{[]}[][]}}}}}}]]]]}})]]
}[})})}[)]{}{)
({(}{})))}(}[)[}{)}}[)[{][{(}{{}]({}{[(})[{[({{[}{(]]})}
]}})[]))]{][])[}(])]({[]}[]([)
[{{}{[{{[}[[}([]
[([]){}][({})({[(([])[][])][[{}{([{{}{(()){{{({}{{}}())}}[]}}()[()[{{{([](()){[[[]]]})}}}]]}])}]]})]
]{}{(}))}](})[{]]()(]([}]([}][}{]{[])}{{{]([][()){{})[{({{{[}{}](]}}
{[{}}){(}[][)(}[}][)({[[{]}[(()[}}){}{)([)]}(()))]{)(}}}][
(]{}{(}}}[)[
[]{}{[[]]}([{}]{}[]){{(())}}
[)([{(][(){)[)}{)]]}}([((][[}}(]{}]]}]][(({{{))[[){}{]][))[]{]][)[{{}{()]){)])))){{{[(]}[}}{}]
{({(){[[[][]{}[[([]{})]{}]][[]()()]]}})}[{}{{}}]
)}][(})){))[{}[}
{[]{({]}[}}[{([([)([){{}{(}}[]}}[[{[}[[()(])[}[]
()()()[]
((){}])][]][}{]{)]]}][{]}[)(])[}[({(
)[((])(]]]]((]){{{{())]}]}(}{([}(({}]])[[{){[}]{{}})[){(
}][[{[((}{[]){}}[[[)({[)}]]}(]]{[)[]}{}(){}}][{()]))})]][(((}}
([]){}{{}{}}()([([{}{[[]()([(([]()))()[[]]])]}])])
[()[[]{{[]}()([])}[]][][]][]()[]{}{}[][]{}{}[()(){}]
{[{){]({(((({](]{([])([{{([])[}(){(]](]{[{[]}}())[){})}))[{})))[
{}[()[]][]{}{}[[{{[[({})]()[[()]]]}}]]
{[{}[][]]}[((()))][]({})[]{}{()}
(){[{({})}]}
([]])][{)]({)[]))}]())[}]))][}{(}}})){]}]{[)}(][})[[
((({{}(([{}(())]))[()]{[[[]()]]}})))
}()))}(}]]{{})}][{](]][{]{[[]]]}]]}([)({([))[[(]}])}[}(([{)[)]]([[](]}]}{]{{})[]){]}{])(
{}{}{}{[[()]][]}
)]}]({{})[[[{]{{{}}][))]{{
))){({}])}])}}]{)()(}(]}([
([[]][])[[]()][]()(([[]]{[()[]{[][{}]}[()]]{}{[]}}{{}()}(()[([][]{})[[{}][]]{}[]])))
(]{[({}[){)))}]{[{}][({[({[]))}[}]}{()(([]{]()}})}[]{[)](((]]])([]}}]){)(([]]}[[}[
([[]])({}(([(){{}[{}]}]){[{}]}))[][{}{}](){}
[][][][][][([])][]{({()}[[()()]{([(){[]{}}{(())}{[](){}()({}())}[({}[[]()])][]])}])}
}[{{(}})}}(((())()({]{([]((][(({)[({[]]}[])}]{][{{}]{)][}(])}}}))}}}
[]({})()[]{}{}[]({}{})[]{([])()[()][{()({})[{}{[[()]{}[]][]}(({{[]{()()()}{}[]()}[]}){{}{}})]}]}
{{(([{)]{}({][{](){({([[[][)}[)})(
[{}]{[()({[{}]})]}
[[{}]]
]{{({[{]}[[)]]}{}))}{){({]]}{]([)({{[]){)]{}){){}()})(]]{{])(])[]}][[()()}
{[([}[[{{(]]][}()())]{){(){)]]){})}]{][][(}[]())[}[)})})[][{[)[})()][]))}[[}
]()])}[}}}{]]{)[}(}]]])])}{(}{([{]({)]}])(})[{}[)]])]}[]{{)){}{()}]}((}}{({])[}])[]}
(]}[{}{{][}))){{{([)([[])([]{[
{(()[]){}}(){[]}({{}(()())})([]){}{}(())()[()]{}()
{{}[{}[{}[]]]}{}({{[]}})[[(){}][]]{}(([]{[][]()()}{{{()()}{[]}({}[]{()})}{()}[[]][()]}))
{[][]}[{}[](){}]{{}{[][{}]}}
()(){}(){((){}[])([[]]())}
{}[[{[((}[(}[[]{{]([(}]][[
{}[([{[{{}()}]{}}([[{}[]]({}{{()}[][][]})])])]
{[](}([)(])[]]})()]){[({]}{{{)({}(][{{[}}(]{
[][]{{}[](())}{}({[()]}())[][[][({}([{}]))]]
((()))[]{[(()({[()({[]}{})]}))]}{[]}{{({}{})[{}{}]{()([()])[{()}()[[]{}()]{}{}[]()]}[[]{[]}([])]}}''' 

ans='''YES
YES
NO
NO
NO
NO
YES
YES
YES
NO
YES
YES
YES
YES
NO
NO
YES
YES
YES
NO
NO
NO
YES
YES
YES
YES
NO
YES
NO
NO
NO
NO
YES
NO
NO
NO
YES
NO
YES
NO
NO
YES
NO
NO
NO
YES
YES
NO
YES
YES
YES
NO
YES
NO
YES
NO
NO
YES
NO
YES
YES
NO
YES
NO
YES
YES
NO
NO
NO
NO
YES
YES
YES
YES
NO
YES
NO
YES
YES'''
ans=ans.splitlines()
for i in range(len(x.splitlines())):
    s=isBalanced(x[i])
    print(s[0]==ans[i])